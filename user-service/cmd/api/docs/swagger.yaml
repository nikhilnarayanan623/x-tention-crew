definitions:
  request.User:
    properties:
      email:
        type: string
      first_name:
        maxLength: 25
        minLength: 3
        type: string
      last_name:
        maxLength: 25
        minLength: 1
        type: string
      password:
        maxLength: 25
        minLength: 6
        type: string
    required:
    - first_name
    - last_name
    type: object
  response.Response:
    properties:
      data: {}
      error: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  response.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      updatedAt:
        type: string
    type: object
info:
  contact: {}
paths:
  /user:
    delete:
      description: API for RemoveAccount
      operationId: RemoveAccount
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      responses:
        "200":
          description: successfully user details updated
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: failed to get user id from params as int
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: user not exist
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: failed to delete user account
          schema:
            $ref: '#/definitions/response.Response'
      summary: Remove Account
      tags:
      - User
    get:
      description: API for GetAccount
      operationId: GetAccount
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      responses:
        "200":
          description: successfully found user account
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.User'
              type: object
        "400":
          description: failed to get user id from params as int
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: user not exist
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: failed to get account
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get Account
      tags:
      - User
    post:
      description: API for create account
      operationId: CreateAccount
      parameters:
      - description: User Details
        in: body
        name: inputs
        required: true
        schema:
          $ref: '#/definitions/request.User'
      responses:
        "200":
          description: Successfully logged in
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.User'
              type: object
        "400":
          description: failed to bind input
          schema:
            $ref: '#/definitions/response.Response'
        "409":
          description: user already exist
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create Account
      tags:
      - User
    put:
      description: API for UpdateAccount
      operationId: UpdateAccount
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - description: User Details
        in: body
        name: inputs
        required: true
        schema:
          $ref: '#/definitions/request.User'
      responses:
        "200":
          description: successfully user details updated
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: failed to bind input
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: user not exist
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: failed to update user details
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update Account
      tags:
      - User
swagger: "2.0"
